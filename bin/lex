#!/usr/bin/env ruby

module Token
    BLOCK = :BLOCK
    END_BLOCK = :END_BLOCK
    PAREN = :PAREN
    END_PAREN = :END_PAREN
    KEYWORD = :KEYWORD
    CONST = :CONST
    TERM = :TERM
    ID = :ID

    def self.keywords
        [
            "int",
            "return"
        ]
    end
end

tokens = []
curconst = ""

File.open(ARGV.last).each_char do |char|
    if /[a-zA-Z0-9]/ =~ char
        curconst << char
        next
    end

    if curconst.length > 0
        if Token.keywords.include? curconst
            tokens << [Token::KEYWORD, curconst]
        elsif curconst =~ /[0-9]/
            tokens << [Token::CONST, curconst]
        else
            tokens << [Token::ID, curconst]
        end

        curconst = ""
    end

    token = case char
    when '{' then [Token::BLOCK, char]
    when '}' then [Token::END_BLOCK, char]
    when '(' then [Token::PAREN, char]
    when ')' then [Token::END_PAREN, char]
    when ';' then [Token::TERM, char]
    when /\s/ then next
    else
        raise "unknown token %s" % char.inspect
    end

    tokens << token
end
